<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube Video Player with Real API</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        .video-container {
            margin-top: 20px;
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
        }
        .video-wrapper {
            position: relative;
            width: 100%;
            padding-bottom: 56.25%; /* 16:9 aspect ratio */
            height: 0;
            overflow: hidden;
            background-color: #000;
            max-width: 560px; /* Standard YouTube embed width */
        }
        .video-wrapper iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
            display: none; /* Hidden by default */
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4 text-center">YouTube Video Player (Backend API Integrated)</h1>

        <div class="input-group mb-3">
            <input type="text" id="searchTermInput" class="form-control" placeholder="Search for videos (e.g., 'farming tips')..." aria-label="Search term">
            <button class="btn btn-primary" type="button" id="searchVideosButton">Search Videos</button>
        </div>
        <div class="text-center text-muted mb-3">
            <small>This will call a local dummy REST API (requires 'json-server' running).</small>
        </div>

        <div id="loader" class="loader"></div>
        <div id="videoContainer" class="video-container">
            </div>
        <div id="message" class="text-center mt-3 text-danger" style="display: none;"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <script>
        // *** IMPORTANT: Replace this with your actual backend API URL ***
        // For local testing with json-server, it will likely be:
        // const API_BASE_URL = 'http://localhost:3000/videos';
        // Your backend might have a different endpoint structure, e.g.,
        // const API_BASE_URL = 'https://your-actual-backend.com/api/videos';
        const API_BASE_URL = 'http://localhost:8001/search'; // Default for json-server setup below

        document.getElementById('searchVideosButton').addEventListener('click', fetchAndRenderVideos);
        document.getElementById('searchTermInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                fetchAndRenderVideos();
            }
        });

        const videoContainer = document.getElementById('videoContainer');
        const loader = document.getElementById('loader');
        const messageDiv = document.getElementById('message');

        async function fetchAndRenderVideos() {
            const searchTermInput = document.getElementById('searchTermInput');
            const searchTerm = searchTermInput.value.trim().toLowerCase();

            // Clear previous videos and messages
            videoContainer.innerHTML = '';
            messageDiv.style.display = 'none';
            messageDiv.textContent = '';

            if (!searchTerm) {
                messageDiv.textContent = 'Please enter a search term.';
                messageDiv.style.display = 'block';
                return;
            }

            loader.style.display = 'block'; // Show loader

            try {
                // Construct the API URL with the search term as a query parameter
                // Example: http://localhost:8001/search?q=cotton
                const apiUrl = `${API_BASE_URL}?q=${encodeURIComponent(searchTerm)}`;

                const response = await fetch(apiUrl);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json(); // Parse the JSON response

                // Assuming the backend returns an array of video URLs
                // E.g., ["https://www.youtube.com/watch?v=videoID1", "https://www.youtube.com/watch?v=videoID2"]
                // Or an array of objects like:
                // [{ url: "...", title: "..." }, { url: "...", title: "..." }]
                // We'll expect an array of strings (URLs) for simplicity based on previous structure.
                const videoLinks = data.results; // Assuming `data` itself is the array of links

                if (videoLinks && videoLinks.length > 0) {
                    videoLinks.forEach(link => {
                        const videoId = getYouTubeVideoId(link);
                        if (videoId) {
                            renderVideoIframe(videoId, videoContainer);
                        }
                    });
                } else {
                    messageDiv.textContent = `No videos found for "${searchTerm}".`;
                    messageDiv.style.display = 'block';
                }

            } catch (error) {
                console.error('Error fetching videos:', error);
                messageDiv.textContent = `Failed to load videos: ${error.message}. Make sure your backend API is running.`;
                messageDiv.style.display = 'block';
            } finally {
                loader.style.display = 'none'; // Hide loader
                searchTermInput.value = ''; // Clear the input field
            }
        }

        function renderVideoIframe(videoId, containerElement) {
            // Note: Using youtube-nocookie.com is generally better for privacy
            const embedUrl = `https://www.youtube.com/embed/${videoId}`;

            const videoWrapper = document.createElement('div');
            videoWrapper.className = 'video-wrapper';

            const iframe = document.createElement('iframe');
            iframe.setAttribute('src', embedUrl);
            iframe.setAttribute('frameborder', '0');
            iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');
            iframe.setAttribute('allowfullscreen', '');

            videoWrapper.appendChild(iframe);
            containerElement.appendChild(videoWrapper);
        }

        function getYouTubeVideoId(url) {
            let videoId = null;
            // Regex to extract video ID from various YouTube URL formats
            const regExp = /(?:https?:\/\/)?(?:www\.)?(?:m\.)?(?:youtube\.com|youtu\.be)\/(?:watch\?v=|embed\/|v\/|)([\w-]{11})(?:\S+)?/i;
            const match = url.match(regExp);
            if (match && match[1]) {
                videoId = match[1];
            }
            return videoId;
        }
    </script>
</body>
</html>
